# 프로젝트 개요
블록체인 프로젝트는 블록체인을 활용한 P2P 전자상거래 시스템을 구현하는 것이 목표. 즉, 이커머스 플랫폼의 구매, 지불-결제 기능을 블록체인을 활용하여 구현하는 것.<br>

- ##### 블록체인 특징
    - 비트코인, 이더리움 등의 암호화폐 핵심 기술
    - 데이터를 분산 처리 및 저장
    - 데어터의 위변조가 어렵고 높은 보안성과 신뢰성 제공함으로써 거래 및 이력 관리가 필요한 데이터 처리에 다양하게 활용 가능
    - 중앙 관리의 필요성이 없어지기 때문에 블록체인 기술을 활용하며 비용적으로도 효율이 높음
    <br>
- ##### 전자상거래와 블록체인의 결합
    - 비교적 적은 비용으로 중개자의 개입 없는 신뢰가능한 지불 체게를 구현 가능, 제 3자 혹은 플랫폼에 지불해야 했던 중개 수수료 절감 가능  
    - 에스크로(Escrow)와 같은 기능은 스마트 컨트랙트의 고전적이면서도 훌륭한 활용 예
    > 에스크로(escrow)는 상거래 시에, 판매자와 구매자의 사이에 신뢰할 수 있는 중립적인 제삼자가 중개하여 금전 또는 물품을 거래를 하도록 하는 것, 또는 그러한 서비스를 말한다. 거래의 안전성을 확보하기 위해 이용된다. 앞으로 블록체인과 스마트 컨트랙트를 사용하면 동일한 기능 구현 가능
    - '어떠한 부분을 자동화하고 분권화 할 수 있을지', '어떤 데이터까지 공개하는 것이 알맞을지' 등의 고민 필요

# Sub PJT 1 ( 1주차 )
가상 머신을 활용하여 개인적으로 실습할 수 있는 프라이빗 이더리움 네트워크 환경 구축
- 이더리움 프로토콜의 공식 구현체(Go-Ethereum) 설치 + 이더리움 환경에서 수행가능한 다양한 커맨드 활용 -> 블록체인의 구조 익히기
- 스마트 컨트랙트 작성법 학습 및 배포 -> 블록체인의 구성과 동작 원리, 활용 방법 익히기
# 필수 지식 학습
- ##### 이더리움
    - 블록체인 기술을 기반으로 하는 분산 컴퓨팅 플랫폼
    - 스마트 컨트랙트의 기능을 새롭게 확장하여 적용, 물론 1세대 블록체인인 비트코인에도 적용되어 있었지만 기능이 제한적이고 고도화되지 않았음
    - 스마트 컨트랙트를 위한 언어(Solidity, LLL등)를 개발하였고 이를 실행시키기 위한 가상 머신(EVM, Ethereum Virtual Machine)도 제작
    - 반복문을 포함하여 보다 복잡한 로직을 구현할 수 있는 튜링 완전 언어 (비트코인에서는 반복문이 동작할 수 없는 튜링 불완전한 스택 기반의 스크립트 언어 사용)
    - [참조링크](https://ethereum.org/en/whitepaper)
    <br>
- ##### 비트코인과 이더리움의 차이 [참조링크](https://blocknomi.com/ethereum-vs-bitcoin)
    | 항목 | 비트코인(1세대) | 이더리움 |
    |:--------:|:--------:|:--------:|
    | 암호 해시함수 | SHA계열의 함수 | Ethash라는 KECCACK기반의 해시 알고리즘 |
    | MPT(Modified Merkle Patricia Trie) | 머클 트리(Merkle Tree) | 머클 트리를 Patricia Trie와 접목시킨 MPT 사용해 key-value 형식으로 사용 |
    | 암호 화폐의 관리 기술 | UTXO(Umspent Transaction Output) 소비되지 않은 거래 출력(잔액) 기반 | '사용자 계정'에 기반 |
    ||암호 화폐 중심|사용자 중심|
    - Ethash : ASIC(Application Specific Integrated Circuit) 저항성 향상하고 채굴의 중앙화 해소하기 위해 사용 [참조링크](https://eth.wiki/en/concepts/ethash/ethash)
    - MPT : 트랜잭션 데이터의 위변조 감지 및 스마트 컨트랙트 관련 상태 정보를 저장, 관리하기 위한 기술
    <br>
- ##### Geth(Go-Ethereum)
    - 이더리움 클라이언트 중 Go 언어로 개발된 버전
    - 이더리움에서 제공하는 다양한 API 사용가능
    - 메인넷, 테스트넷 등과의 연동도 쉽게 가능
    - 가장 널리 사용되는 이더리움 클라이언트
    - [참조링크](https://github.com/ethereum/go-ethereum)
    ```shell
    # Ubuntu 18.04 LTS 에서 Geth 설치
    sudo apt-get update
    sudo apt-get install software-properties-common
    sudo add-apt-repository -y ppa:ethereum/ethereum
    sudo apt-get install ethereum
    geth version
    ```
- ##### Web3.js
    - 이더리움 생태계에 다양한 요청 처리가능한 Javascript API 라이브러리
    - HTTP 기반의 JSON RPC 지원, Web3.js 또한 내부적으로 JSON RPC 사용
    - [참조링크](https://web3js.readthedocs.io/en/v1.2.0)
